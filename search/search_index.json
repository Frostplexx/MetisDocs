{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Metis Docs Metis -- In ancient Greek religion, was a mythical goddess, an Oceanid nymph, daughter of the Titans Oceanus and Tethys. She is the mother of wisdom and deep thought. This Bot aims to help you manage and track your D&D campaigns. Here you will find all the documentation regarding this bot. Current Bot version: v1.0.3 Docs for Bot version: v1.1.0-beta.3","title":"Home"},{"location":"#welcome-to-metis-docs","text":"Metis -- In ancient Greek religion, was a mythical goddess, an Oceanid nymph, daughter of the Titans Oceanus and Tethys. She is the mother of wisdom and deep thought. This Bot aims to help you manage and track your D&D campaigns. Here you will find all the documentation regarding this bot. Current Bot version: v1.0.3 Docs for Bot version: v1.1.0-beta.3","title":"Welcome to Metis Docs"},{"location":"generalInfo/","text":"General Info and resources Resources Create custom Metrics in PM2 Discord.JS Documentation How to use Markdown Material for MkDocs General Info This Bot is Intended only for use on the LMU DnD server and is not yet built to support more than one server! This Documentation is mostly intended for internal use only, especially because most of the code for this bot is private.","title":"General Info"},{"location":"generalInfo/#general-info-and-resources","text":"","title":"General Info and resources"},{"location":"generalInfo/#resources","text":"Create custom Metrics in PM2 Discord.JS Documentation How to use Markdown Material for MkDocs","title":"Resources"},{"location":"generalInfo/#general-info","text":"This Bot is Intended only for use on the LMU DnD server and is not yet built to support more than one server! This Documentation is mostly intended for internal use only, especially because most of the code for this bot is private.","title":"General Info"},{"location":"commands/buttons/","text":"Buttons These commands modify the state of Buttons disable-button Set a Button to disabled by either using its index in the array or its custom id. Argument Description message_id id of the message where you want to modify the buttons buttons_index index of the button in its array. The Buttons are numbered left to right and start with 0 custom_id alternatively you can use the id of the button, which you have to know enable-button Set a Button to enable by either using its index in the array or its custom id. Argument Description message_id id of the message where you want to modify the buttons buttons_index index of the button in its array. The Buttons are numbered left to right and start with 0 custom_id alternatively you can use the id of the button, which you have to know","title":"Buttons"},{"location":"commands/buttons/#buttons","text":"These commands modify the state of Buttons","title":"Buttons"},{"location":"commands/buttons/#disable-button","text":"Set a Button to disabled by either using its index in the array or its custom id. Argument Description message_id id of the message where you want to modify the buttons buttons_index index of the button in its array. The Buttons are numbered left to right and start with 0 custom_id alternatively you can use the id of the button, which you have to know","title":"disable-button"},{"location":"commands/buttons/#enable-button","text":"Set a Button to enable by either using its index in the array or its custom id. Argument Description message_id id of the message where you want to modify the buttons buttons_index index of the button in its array. The Buttons are numbered left to right and start with 0 custom_id alternatively you can use the id of the button, which you have to know","title":"enable-button"},{"location":"commands/campaign/","text":"Campaign Here are the arguably most important commands for the bot - everything that has to do with campaigns add-database-entry With this command you can add a new entry to the Campaign Database. Argument Description campaign_name Set the name of the campaign description Set the descrption of the campaign language set the language players_max set the maximum number of allowded players in the campaign players_current set the amount of current players in the campaign location this is the text that will be displayed under the \"\ud83c\udfe0 Where\" heading in the campaing time this is the text that will be displayed under the \"\ud83d\udd63 When\" heading in the campaign notes this is the text that wille be displayed underthe \"\ud83d\udcdd Notes\" heading in the campaign difficutly this is the difficulty of the campaign. It can be one of the following string: \"Beginner/Easy\", \"Medium\", \"Expert/Difficult\" message_id id of the message that contains the campaign embed dm_id user id of the dungeon master role_id id of the role that lets people view the right channels for the campaign text_channel_id id of the text channel for this campaign voice_channel_id id of the voice channel for this campaing category_id id of the category that contains the voice and text channel campaign_id id of the whole campaign. campaign ids always start with 8 edit-campaign edit any of the following parameters of any campaign Argument Description campaign_id edit the campaign with this id. Can be found in the footer of the embed campaign_name Set the name of the campaign description Set the descrption of the campaign language set the language players_max set the maximum number of allowded players in the campaign players_current set the amount of current players in the campaign location this is the text that will be displayed under the \"\ud83c\udfe0 Where\" heading in the campaing time this is the text that will be displayed under the \"\ud83d\udd63 When\" heading in the campaign notes this is the text that wille be displayed underthe \"\ud83d\udcdd Notes\" heading in the campaign difficutly this is the difficulty of the campaign. It can be one of the following string: \"Beginner/Easy\", \"Medium\", \"Expert/Difficult\" gen-test-campaign Generates a Campaign with predefined values. For development purposes only! delete-campaign Generates a dropdown of campaigns where you are the dm. You can then select one of the campaigns and delete it. Campaigns are also saved to the trash where they can be restored up to 24h after deletion. dev-delete-campaign Argument Description campaign_id id of the campaign which can be found in the footer of the embed. Deletes a campaign instantly without the option to restore it!. Only to be used by admins and devs. undo-camp-delete Generates a dropdown of deleted campaigns where you can choose one to restore. Campaigns are saved in trash for 24h after that they are deleted forever. Attention! Content of e.g. Text channels is not saved","title":"Campaign"},{"location":"commands/campaign/#campaign","text":"Here are the arguably most important commands for the bot - everything that has to do with campaigns","title":"Campaign"},{"location":"commands/campaign/#add-database-entry","text":"With this command you can add a new entry to the Campaign Database. Argument Description campaign_name Set the name of the campaign description Set the descrption of the campaign language set the language players_max set the maximum number of allowded players in the campaign players_current set the amount of current players in the campaign location this is the text that will be displayed under the \"\ud83c\udfe0 Where\" heading in the campaing time this is the text that will be displayed under the \"\ud83d\udd63 When\" heading in the campaign notes this is the text that wille be displayed underthe \"\ud83d\udcdd Notes\" heading in the campaign difficutly this is the difficulty of the campaign. It can be one of the following string: \"Beginner/Easy\", \"Medium\", \"Expert/Difficult\" message_id id of the message that contains the campaign embed dm_id user id of the dungeon master role_id id of the role that lets people view the right channels for the campaign text_channel_id id of the text channel for this campaign voice_channel_id id of the voice channel for this campaing category_id id of the category that contains the voice and text channel campaign_id id of the whole campaign. campaign ids always start with 8","title":"add-database-entry"},{"location":"commands/campaign/#edit-campaign","text":"edit any of the following parameters of any campaign Argument Description campaign_id edit the campaign with this id. Can be found in the footer of the embed campaign_name Set the name of the campaign description Set the descrption of the campaign language set the language players_max set the maximum number of allowded players in the campaign players_current set the amount of current players in the campaign location this is the text that will be displayed under the \"\ud83c\udfe0 Where\" heading in the campaing time this is the text that will be displayed under the \"\ud83d\udd63 When\" heading in the campaign notes this is the text that wille be displayed underthe \"\ud83d\udcdd Notes\" heading in the campaign difficutly this is the difficulty of the campaign. It can be one of the following string: \"Beginner/Easy\", \"Medium\", \"Expert/Difficult\"","title":"edit-campaign"},{"location":"commands/campaign/#gen-test-campaign","text":"Generates a Campaign with predefined values. For development purposes only!","title":"gen-test-campaign"},{"location":"commands/campaign/#delete-campaign","text":"Generates a dropdown of campaigns where you are the dm. You can then select one of the campaigns and delete it. Campaigns are also saved to the trash where they can be restored up to 24h after deletion.","title":"delete-campaign"},{"location":"commands/campaign/#dev-delete-campaign","text":"Argument Description campaign_id id of the campaign which can be found in the footer of the embed. Deletes a campaign instantly without the option to restore it!. Only to be used by admins and devs.","title":"dev-delete-campaign"},{"location":"commands/campaign/#undo-camp-delete","text":"Generates a dropdown of deleted campaigns where you can choose one to restore. Campaigns are saved in trash for 24h after that they are deleted forever. Attention! Content of e.g. Text channels is not saved","title":"undo-camp-delete"},{"location":"commands/commands/","text":"Commands All Commands are stored in src/commandHandler/commands and are divided into these catergories: Utility Player Development Campaign Creating a new command To create a new command please create a .ts file inside the commands directory. Add this boilerplate code: import { SlashCommandBuilder } from \"@discordjs/builders\"; import { CommandInteraction, Message } from \"discord.js\"; import { SlashCommand } from \"../commands\"; //______SLASH COMMAND OPTIONS_________ const data = new SlashCommandBuilder() .setName(\"name\") .setDescription(\"description\") //false = @everyone role cant use this command .setDefaultPermission(false); //_________Command____________ async function execute(interaction: CommandInteraction) { // write your command here } //___________SlashCommand___________ export const command: SlashCommand = { permissions: [\"devRole\"], data: data, execute: execute, }; Replace \"name\" with the name for your command and \"description\" with the description. Attention! your name has to be with all lowercase letters and no spaces write your command inside the execute(interaction) function run npm deploy-commands to register your new command start your bot. Your command should now be working! If you want to edit the permissions please look here","title":"Commands"},{"location":"commands/commands/#commands","text":"All Commands are stored in src/commandHandler/commands and are divided into these catergories: Utility Player Development Campaign","title":"Commands"},{"location":"commands/commands/#creating-a-new-command","text":"To create a new command please create a .ts file inside the commands directory. Add this boilerplate code: import { SlashCommandBuilder } from \"@discordjs/builders\"; import { CommandInteraction, Message } from \"discord.js\"; import { SlashCommand } from \"../commands\"; //______SLASH COMMAND OPTIONS_________ const data = new SlashCommandBuilder() .setName(\"name\") .setDescription(\"description\") //false = @everyone role cant use this command .setDefaultPermission(false); //_________Command____________ async function execute(interaction: CommandInteraction) { // write your command here } //___________SlashCommand___________ export const command: SlashCommand = { permissions: [\"devRole\"], data: data, execute: execute, }; Replace \"name\" with the name for your command and \"description\" with the description. Attention! your name has to be with all lowercase letters and no spaces write your command inside the execute(interaction) function run npm deploy-commands to register your new command start your bot. Your command should now be working! If you want to edit the permissions please look here","title":"Creating a new command"},{"location":"commands/commands/#_1","text":"","title":""},{"location":"commands/development/","text":"Buttons Some commands that are only used in development dev-edit-campaign See edit-campaign under the Campaigns section nuke Deletes all the campaigns and users from the database and all campaign messages, channels and roles from the server. Basically starts the bot from new. This is documented badly on purpose, so that nobody gets any funny ideas! Argument Description nukemode security switch, true = you can nuke, false = it wont let you nuke the server passhprase Additionaly to nukemode being set to true, you also need to know the secret passhphrase purge This command deletes a given amount of messages. Messages cant be older than 14 days, otherwhise the bot returns an error. Argument Description amount amount of messages you want to delete. Has to be between 1 and 100 ping This command does nothing and is used for testing only gen-test-campaign Argument Description dm optional argument to set the dm. If this is empty the dm is a default user Generates a campaign with some preset values. This can be used to quickly generate a campaign without having to fill out the form","title":"Development"},{"location":"commands/development/#buttons","text":"Some commands that are only used in development","title":"Buttons"},{"location":"commands/development/#dev-edit-campaign","text":"See edit-campaign under the Campaigns section","title":"dev-edit-campaign"},{"location":"commands/development/#nuke","text":"Deletes all the campaigns and users from the database and all campaign messages, channels and roles from the server. Basically starts the bot from new. This is documented badly on purpose, so that nobody gets any funny ideas! Argument Description nukemode security switch, true = you can nuke, false = it wont let you nuke the server passhprase Additionaly to nukemode being set to true, you also need to know the secret passhphrase","title":"nuke"},{"location":"commands/development/#purge","text":"This command deletes a given amount of messages. Messages cant be older than 14 days, otherwhise the bot returns an error. Argument Description amount amount of messages you want to delete. Has to be between 1 and 100","title":"purge"},{"location":"commands/development/#ping","text":"This command does nothing and is used for testing only","title":"ping"},{"location":"commands/development/#gen-test-campaign","text":"Argument Description dm optional argument to set the dm. If this is empty the dm is a default user Generates a campaign with some preset values. This can be used to quickly generate a campaign without having to fill out the form","title":"gen-test-campaign"},{"location":"commands/players/","text":"Player These commands help you to manage players add-player Add a User to a campaign Argument Description user type the name of the user (either Username or Nickname) campaign_id id of the campaign you want to add the user to status Get your own status. This command returns all the campaigns you are in and some info about them. player-status This is nearly the same as the status command. It gets all the campaign a user is in. Argument Description user type the name of the user (either Username or Nickname) kick-player Kick a player from a campaign. Attention! the player can apply again to the same campaign, so it is not a ban. Argument Description user type the name of the user (either Username or Nickname) campaign_id id of the campaign you want to add the user to Quotes add-quote Argument Description user type the name of the user (either Username or Nickname) quote quote you want to add tags list of relevant tags separated by a comma. e.g. funny,hello,lol Saves the quote to quotes.json where it can be called with other commands. delete-quote Argument Description user type the name of the user (either Username or Nickname) Generates a dropdown where you can select a quote from the given user to delete. quotes Argument Description user type the name of the user (either Username or Nickname) content content to filter by tag tag to filter by List all the quotes of a user. You can also filter them by content and tag. q Get a random quote from yourselve. give-quote Argument Description user type the name of the user (either Username or Nickname) content content to filter by tag tag to filter by Get a random quote from a user. These quotes can be filtered by tag and content.","title":"Players"},{"location":"commands/players/#player","text":"These commands help you to manage players","title":"Player"},{"location":"commands/players/#add-player","text":"Add a User to a campaign Argument Description user type the name of the user (either Username or Nickname) campaign_id id of the campaign you want to add the user to","title":"add-player"},{"location":"commands/players/#status","text":"Get your own status. This command returns all the campaigns you are in and some info about them.","title":"status"},{"location":"commands/players/#player-status","text":"This is nearly the same as the status command. It gets all the campaign a user is in. Argument Description user type the name of the user (either Username or Nickname)","title":"player-status"},{"location":"commands/players/#kick-player","text":"Kick a player from a campaign. Attention! the player can apply again to the same campaign, so it is not a ban. Argument Description user type the name of the user (either Username or Nickname) campaign_id id of the campaign you want to add the user to","title":"kick-player"},{"location":"commands/players/#quotes","text":"","title":"Quotes"},{"location":"commands/players/#add-quote","text":"Argument Description user type the name of the user (either Username or Nickname) quote quote you want to add tags list of relevant tags separated by a comma. e.g. funny,hello,lol Saves the quote to quotes.json where it can be called with other commands.","title":"add-quote"},{"location":"commands/players/#delete-quote","text":"Argument Description user type the name of the user (either Username or Nickname) Generates a dropdown where you can select a quote from the given user to delete.","title":"delete-quote"},{"location":"commands/players/#quotes_1","text":"Argument Description user type the name of the user (either Username or Nickname) content content to filter by tag tag to filter by List all the quotes of a user. You can also filter them by content and tag.","title":"quotes"},{"location":"commands/players/#q","text":"Get a random quote from yourselve.","title":"q"},{"location":"commands/players/#give-quote","text":"Argument Description user type the name of the user (either Username or Nickname) content content to filter by tag tag to filter by Get a random quote from a user. These quotes can be filtered by tag and content.","title":"give-quote"},{"location":"commands/utility/","text":"Utilites These are some utlity and qol commands feedback Get the link to the feedback form. get-form Get the link to the form to create a new campaign. help Help command of the bot. roll Rolls a die. Argument Description dice e.g. '2d8+3'. Use the normal die notation check Skill in capital letters e.g. STEALTH campaign-info Generates a dropdown where you can select a campaign from the server and see some info on it. In essence it shows the same info as the campaign message but also the associated channels and roles and their ids. check This makes a D&D check. Argument Description check Skill in capital letters e.g. STEALTH. and also have modifier e.g. +5 migrate Used to migrate old campaigns to the new system. Generates a new campaign but no new channels, but uses existing ones. Also adds the players automatically Argument Description campaign_name Set the name of the campaign description Set the descrption of the campaign language set the language players_max set the maximum number of allowded players in the campaign location this is the text that will be displayed under the \"\ud83c\udfe0 Where\" heading in the campaing time this is the text that will be displayed under the \"\ud83d\udd63 When\" heading in the campaign notes this is the text that wille be displayed underthe \"\ud83d\udcdd Notes\" heading in the campaign difficutly this is the difficulty of the campaign. It can be one of the following string: \"Beginner/Easy\", \"Medium\", \"Expert/Difficult\" dm Dungeon Master -- Discord User which is used internally dm_namer Dungeons Master name -- Name that appears on the message role_id id of the role that lets people view the right channels for the campaign text_channel_id id of the text channel for this campaign voice_channel_id id of the voice channel for this campaing category_id id of the category that contains the voice and text channel player1-5 add player to campaign pruge Deletes a given number of messages, that can't be older than 14 days. Argument Description amount amount of messages you want to delete between 1-100","title":"Utility"},{"location":"commands/utility/#utilites","text":"These are some utlity and qol commands","title":"Utilites"},{"location":"commands/utility/#feedback","text":"Get the link to the feedback form.","title":"feedback"},{"location":"commands/utility/#get-form","text":"Get the link to the form to create a new campaign.","title":"get-form"},{"location":"commands/utility/#help","text":"Help command of the bot.","title":"help"},{"location":"commands/utility/#roll","text":"Rolls a die. Argument Description dice e.g. '2d8+3'. Use the normal die notation check Skill in capital letters e.g. STEALTH","title":"roll"},{"location":"commands/utility/#campaign-info","text":"Generates a dropdown where you can select a campaign from the server and see some info on it. In essence it shows the same info as the campaign message but also the associated channels and roles and their ids.","title":"campaign-info"},{"location":"commands/utility/#check","text":"This makes a D&D check. Argument Description check Skill in capital letters e.g. STEALTH. and also have modifier e.g. +5","title":"check"},{"location":"commands/utility/#migrate","text":"Used to migrate old campaigns to the new system. Generates a new campaign but no new channels, but uses existing ones. Also adds the players automatically Argument Description campaign_name Set the name of the campaign description Set the descrption of the campaign language set the language players_max set the maximum number of allowded players in the campaign location this is the text that will be displayed under the \"\ud83c\udfe0 Where\" heading in the campaing time this is the text that will be displayed under the \"\ud83d\udd63 When\" heading in the campaign notes this is the text that wille be displayed underthe \"\ud83d\udcdd Notes\" heading in the campaign difficutly this is the difficulty of the campaign. It can be one of the following string: \"Beginner/Easy\", \"Medium\", \"Expert/Difficult\" dm Dungeon Master -- Discord User which is used internally dm_namer Dungeons Master name -- Name that appears on the message role_id id of the role that lets people view the right channels for the campaign text_channel_id id of the text channel for this campaign voice_channel_id id of the voice channel for this campaing category_id id of the category that contains the voice and text channel player1-5 add player to campaign","title":"migrate"},{"location":"commands/utility/#pruge","text":"Deletes a given number of messages, that can't be older than 14 days. Argument Description amount amount of messages you want to delete between 1-100","title":"pruge"},{"location":"development/buttons/","text":"","title":"Buttons"},{"location":"development/campaigns/","text":"Campaigns This Document will explain the flow every campaign goes trough until it appears as a message in your discord server Sending a Campaign The first step is that the user fills out the google form and sends it. The campaign will be converted from a google form to a json object which looks like this: { \"campaign_name\" : \"Test Campaign\" , \"dm_name\" : \"Hans\" , \"language\" : \"English\" , \"description\" : \"This is the description\" , \"difficulty\" : \"Medium\" , \"players_max\" : 5 , \"location\" : \"Some location\" , \"time\" : \"Every day, all day long\" , \"notes\" : \"here come the optional notes\" , \"icon\" : \"Shield\" , \"username\" : \"Hans#0002\" } Important to note is, that difficulty can be either \"Beginner/Easy\", \"Medium\" or \"Expert/Difficult\" and icon can be \"Dice\", \"Swords\" or \"Shield\" as seen in the interface for the google forms data: export interface GoogleFormsData { \"campaign_name\" : string , \"dm_name\" : string , \"language\" : string , \"description\" : string , \"difficulty\" : \"Beginner/Easy\" | \"Medium\" | \"Expert/Difficult\" , \"players_max\" : number , \"location\" : string , \"time\" : string , \"notes\" : string | null , \"icon\" : \"Dice\" | \"Swords\" | \"Shield\" , \"username\" : string } If the express server now receives the google forms data it calls the generateCampaign() function in the next step. Generating the Campaign Generating channels and buttons and registering user Before anything else the bot generates the correct channels and registers the buttons for the campaign. After that it adds the user which it gets via the username (=Discord tag). //fetch user by username and get the id const user = await getMemberFromUsername ( data . username , process . env . GUILD_ID ! ); //generates and gets corresponding channels const campaignChannels : CampaignChannels = await generateCampaignChannels ( data . campaign_name , user ? . id ?? \"\" , ); //add DM to User Database const userData = await userToUserDataObject ( user as GuildMember , { isDM : true , isInCampaign : true }); await addUserDataDBEntry ( userData ). then ( async () => { await addCampaignToUser ( user ! , campaignId ); }); //generates and registers the \"apply for campaign\" Button const btnRow = new MessageActionRow (). addComponents ( new MessageButton () . setCustomId ( \"beitreten\" ) . setLabel ( \"Apply for Campaign \" ) . setStyle ( \"PRIMARY\" ) . setEmoji ( \"\ud83d\udcdd\" ), ); registerCampaignEmbedButton ( btnRow . components [ 0 ] as MessageButton , campaignId , ); Campaign Channels are made up of a text channel, a voice channel and a category as a parent. The the Category is named the same as the name of the campaign and the voice and text channels are called \"Campaign Voice\" and \"Campaign Text\" respectively. In addition to the channels the bot creates also roles in the same step. These roles have the permission to see and access the aforementioned channels and are names \"[campaign name] -- Roll\". Also mods and admins have access to the channels. Afterwards it generates the embed for the campaign by calling formsDataToCampEmbed() and passing the campaign data and the campaign id. Generating the Embed The Embed is a big Javascript Object which looks like this: { color : Number.parseInt ( campData . color . replace ( \"#\" , \"0x\" )), title : `__ ${ campData . title } __` , description : campData.description , fields : [ { name : \"**\ud83c\udfe0 Where**\" , value : campData.location , inline : false }, { name : \"**\ud83d\udd63 When**\" , value : campData.time , inline : false }, { name : \"**\ud83d\udcdd Notes**\" , value : campData.notes ?? \"\" , inline : false , }, { name : \"\\u200B\" , value : centerText ( \" Additional Info \" , 30 , \"\u2501\" ), inline : false }, { name : \"\\u200B\" , value : `\u2694\ufe0f ${ campData . currentPlayers } / ${ campData . maxPlayers } Players\\n \ud83d\udcd6 DM Name: ${ campData . dmName } ` , inline : true , }, { name : \"\\u200B\" , value : `\ud83e\uddee Difficulty: ${ campData . difficulty } \\n \ud83c\udf0d Language: ${ campData . language } ` , inline : true , }, ], image : { url : \"https://i.imgur.com/Tz2QZ5O.png\" , }, thumbnail : { url : url , }, timestamp : campData.timestamp?.getDate () ?? new Date (). getTime (), footer : { text : campData.footerText + `\\nCampaign-ID: ${ campData . campId } ` , icon_url : \"https://i.imgur.com/mMW6WlB.png\" , } }; Where campData is the google forms data object except the icon which is passed separately and associated to a url with this code snippet let url = \"\" ; switch ( icon ) { case \"Dice\" : url = \"https://i.imgur.com/snWt2hZ.png\" ; break ; case \"Swords\" : url = \"https://i.imgur.com/GJaCzBE.png\" ; break ; case \"Shield\" : url = \"https://i.imgur.com/GFAHDGo.png\" ; break ; default : url = \"https://i.imgur.com/snWt2hZ.png\" ; break ; } ``` ### Finishing up This embed is then sent with ``` typescript await campaignOverviewChannel . send ({ content : \"\\u200B\" , embeds : [ campaignEmbed ], components : [ btnRow ] }) . then (( message ) => { msgId = message . id ; }); and the Campaign is added to the database with //Inserts the Data into the DB addCampaignDBEntry ( campaignData ); await updateMetrics (); Also the metrics for pm2 are updated.","title":"Campaigns"},{"location":"development/campaigns/#campaigns","text":"This Document will explain the flow every campaign goes trough until it appears as a message in your discord server","title":"Campaigns"},{"location":"development/campaigns/#sending-a-campaign","text":"The first step is that the user fills out the google form and sends it. The campaign will be converted from a google form to a json object which looks like this: { \"campaign_name\" : \"Test Campaign\" , \"dm_name\" : \"Hans\" , \"language\" : \"English\" , \"description\" : \"This is the description\" , \"difficulty\" : \"Medium\" , \"players_max\" : 5 , \"location\" : \"Some location\" , \"time\" : \"Every day, all day long\" , \"notes\" : \"here come the optional notes\" , \"icon\" : \"Shield\" , \"username\" : \"Hans#0002\" } Important to note is, that difficulty can be either \"Beginner/Easy\", \"Medium\" or \"Expert/Difficult\" and icon can be \"Dice\", \"Swords\" or \"Shield\" as seen in the interface for the google forms data: export interface GoogleFormsData { \"campaign_name\" : string , \"dm_name\" : string , \"language\" : string , \"description\" : string , \"difficulty\" : \"Beginner/Easy\" | \"Medium\" | \"Expert/Difficult\" , \"players_max\" : number , \"location\" : string , \"time\" : string , \"notes\" : string | null , \"icon\" : \"Dice\" | \"Swords\" | \"Shield\" , \"username\" : string } If the express server now receives the google forms data it calls the generateCampaign() function in the next step.","title":"Sending a Campaign"},{"location":"development/campaigns/#generating-the-campaign","text":"","title":"Generating the Campaign"},{"location":"development/campaigns/#generating-channels-and-buttons-and-registering-user","text":"Before anything else the bot generates the correct channels and registers the buttons for the campaign. After that it adds the user which it gets via the username (=Discord tag). //fetch user by username and get the id const user = await getMemberFromUsername ( data . username , process . env . GUILD_ID ! ); //generates and gets corresponding channels const campaignChannels : CampaignChannels = await generateCampaignChannels ( data . campaign_name , user ? . id ?? \"\" , ); //add DM to User Database const userData = await userToUserDataObject ( user as GuildMember , { isDM : true , isInCampaign : true }); await addUserDataDBEntry ( userData ). then ( async () => { await addCampaignToUser ( user ! , campaignId ); }); //generates and registers the \"apply for campaign\" Button const btnRow = new MessageActionRow (). addComponents ( new MessageButton () . setCustomId ( \"beitreten\" ) . setLabel ( \"Apply for Campaign \" ) . setStyle ( \"PRIMARY\" ) . setEmoji ( \"\ud83d\udcdd\" ), ); registerCampaignEmbedButton ( btnRow . components [ 0 ] as MessageButton , campaignId , ); Campaign Channels are made up of a text channel, a voice channel and a category as a parent. The the Category is named the same as the name of the campaign and the voice and text channels are called \"Campaign Voice\" and \"Campaign Text\" respectively. In addition to the channels the bot creates also roles in the same step. These roles have the permission to see and access the aforementioned channels and are names \"[campaign name] -- Roll\". Also mods and admins have access to the channels. Afterwards it generates the embed for the campaign by calling formsDataToCampEmbed() and passing the campaign data and the campaign id.","title":"Generating channels and buttons and registering user"},{"location":"development/campaigns/#generating-the-embed","text":"The Embed is a big Javascript Object which looks like this: { color : Number.parseInt ( campData . color . replace ( \"#\" , \"0x\" )), title : `__ ${ campData . title } __` , description : campData.description , fields : [ { name : \"**\ud83c\udfe0 Where**\" , value : campData.location , inline : false }, { name : \"**\ud83d\udd63 When**\" , value : campData.time , inline : false }, { name : \"**\ud83d\udcdd Notes**\" , value : campData.notes ?? \"\" , inline : false , }, { name : \"\\u200B\" , value : centerText ( \" Additional Info \" , 30 , \"\u2501\" ), inline : false }, { name : \"\\u200B\" , value : `\u2694\ufe0f ${ campData . currentPlayers } / ${ campData . maxPlayers } Players\\n \ud83d\udcd6 DM Name: ${ campData . dmName } ` , inline : true , }, { name : \"\\u200B\" , value : `\ud83e\uddee Difficulty: ${ campData . difficulty } \\n \ud83c\udf0d Language: ${ campData . language } ` , inline : true , }, ], image : { url : \"https://i.imgur.com/Tz2QZ5O.png\" , }, thumbnail : { url : url , }, timestamp : campData.timestamp?.getDate () ?? new Date (). getTime (), footer : { text : campData.footerText + `\\nCampaign-ID: ${ campData . campId } ` , icon_url : \"https://i.imgur.com/mMW6WlB.png\" , } }; Where campData is the google forms data object except the icon which is passed separately and associated to a url with this code snippet let url = \"\" ; switch ( icon ) { case \"Dice\" : url = \"https://i.imgur.com/snWt2hZ.png\" ; break ; case \"Swords\" : url = \"https://i.imgur.com/GJaCzBE.png\" ; break ; case \"Shield\" : url = \"https://i.imgur.com/GFAHDGo.png\" ; break ; default : url = \"https://i.imgur.com/snWt2hZ.png\" ; break ; } ``` ### Finishing up This embed is then sent with ``` typescript await campaignOverviewChannel . send ({ content : \"\\u200B\" , embeds : [ campaignEmbed ], components : [ btnRow ] }) . then (( message ) => { msgId = message . id ; }); and the Campaign is added to the database with //Inserts the Data into the DB addCampaignDBEntry ( campaignData ); await updateMetrics (); Also the metrics for pm2 are updated.","title":"Generating the Embed"},{"location":"development/commands/","text":"Commands In this section we will explore how commands are created and registered. Creating a command Writing the command As seen here commands have the following basic layout: import { SlashCommandBuilder } from \"@discordjs/builders\" ; import { CommandInteraction , Message } from \"discord.js\" ; import { SlashCommand } from \"../commands\" ; //______SLASH COMMAND OPTIONS_________ const data = new SlashCommandBuilder () . setName ( \"name\" ) . setDescription ( \"description\" ) //false = @everyone role cant use this command . setDefaultPermission ( false ); //_________Command____________ async function execute ( interaction : CommandInteraction ) { // write your command here } //___________SlashCommand___________ export const command : SlashCommand = { permissions : [ \"devRole\" ], data : data , execute : execute , }; After the initial imports a new SlashCommandBuilder() is created. This Builder needs to have the following Parameters: setName -- the name you want to give your command / the name with which the command is called in discord. It has to be all lower case without spaces setDescription -- description that shows in discord setDefaultPermission -- if this is set to true everyone has per default access to this command. For commands only intended for some roles set this option to false Inside the execute function is where your code will get executed. Write your command here. The last part of the command should be left alone. Except the permissions Array. Add here the Role or Users who should have access to your command. For more information see here The .ts file of your command has to be inside the \"src/commandHandler/commands\" folder but can be in any subfolder you like. Inside the same folder you'll also find the same snippet as on this page in the \"commandCodeSnippet.txt\". Registering Commands You can register commands with npm run deploy-commands . This will first recursively read all the files inside \"src/commandHandler/commands\" and save the to an array. Afterwards a call to the Discord API is made where all the commands are registered with the discord bot token and their command data: ( async () => { try { console . log ( 'Started refreshing application (/) commands.' ); await rest . put ( Routes . applicationGuildCommands ( process . env . CLIENT_ID ! , process . env . GUILD_ID ! ), { body : commands }, ) console . log ( 'Successfully reloaded application (/) commands.' ); } catch ( _error ) { console . error ( _error ); } })(); While registering the commands the bot will start and after it started completely the permissions for all the commands will be set. Setting Command Permissions After the bot started all the commands that are registered to it are fetched with const comms = await guild.commands.fetch(); Then the roles Array is read containing all the roles we defined in the permissions.json. This is an example of such a Role: { \"name\" : \"adminRole\" , \"id\" : \"940188878692835368\" , \"type\" : \"ROLE\" , \"permission\" : true } Now we loop through all the commands inside comms and for each one we get the permission array defined here: //___________SlashCommand___________ export const command : SlashCommand = { permissions : [ \"devRole\" ], data : data , execute : execute , }; and search for the name in the roles array. When we found the correct role we map its data to an interface called DeployablePermissionData , which looks like this, and return it: interface DeployablePermissionData { id : string ; type : string ; permission : boolean ; } id is the id of the Role or the User type can either be USER or ROLE permission tue means the role or user can use the command. false means he cant. The whole function looks like this: function mapDeployablePermissions ( permissionsNamesArray : string [], roles : Array < any > ) { const permissionsArray : any = []; let deployablePermissions : DeployablePermissionData [] = []; permissionsNamesArray . forEach ( permission =>{ permissionsArray . push (( roles . find ( role => role . name === permission )) ?? \"\" ) }) deployablePermissions = permissionsArray . map (( role : any ) => { return { id : role.id ?? \"123456789012345678\" , type : role . type ?? \"ROLE\" , permission : role.permission ?? false } } ) return deployablePermissions ; } Now that we have the permission data for every permission of this command we add it and the command id to the fullPermissions Array. After we do this for every remaining we have an Array [ { id : ' 950428001533845659 ' , permissio ns : [ { id : \"123456789012345678\" , t ype : \"ROLE\" , permissio n : true }, { id : \"123456789012345678\" , t ype : \"ROLE\" , permissio n : true } ] } ] In the last step this Array gets passed into the guild.commands.permissions.set(); function where all the permissions are finally set. Editing or Deleting commands Editing Commands You can edit the content of //_________Command____________ async function execute ( interaction : CommandInteraction ) { // write your command here } but if you update for example the permissions you need to run npm run deploy-commands again. Deleting Commands If instead you want to delete a command you only need to delete its file from the \"/commands\" folder and then run npm run deploy-commands .","title":"Commands"},{"location":"development/commands/#commands","text":"In this section we will explore how commands are created and registered.","title":"Commands"},{"location":"development/commands/#creating-a-command","text":"","title":"Creating a command"},{"location":"development/commands/#writing-the-command","text":"As seen here commands have the following basic layout: import { SlashCommandBuilder } from \"@discordjs/builders\" ; import { CommandInteraction , Message } from \"discord.js\" ; import { SlashCommand } from \"../commands\" ; //______SLASH COMMAND OPTIONS_________ const data = new SlashCommandBuilder () . setName ( \"name\" ) . setDescription ( \"description\" ) //false = @everyone role cant use this command . setDefaultPermission ( false ); //_________Command____________ async function execute ( interaction : CommandInteraction ) { // write your command here } //___________SlashCommand___________ export const command : SlashCommand = { permissions : [ \"devRole\" ], data : data , execute : execute , }; After the initial imports a new SlashCommandBuilder() is created. This Builder needs to have the following Parameters: setName -- the name you want to give your command / the name with which the command is called in discord. It has to be all lower case without spaces setDescription -- description that shows in discord setDefaultPermission -- if this is set to true everyone has per default access to this command. For commands only intended for some roles set this option to false Inside the execute function is where your code will get executed. Write your command here. The last part of the command should be left alone. Except the permissions Array. Add here the Role or Users who should have access to your command. For more information see here The .ts file of your command has to be inside the \"src/commandHandler/commands\" folder but can be in any subfolder you like. Inside the same folder you'll also find the same snippet as on this page in the \"commandCodeSnippet.txt\".","title":"Writing the command"},{"location":"development/commands/#registering-commands","text":"You can register commands with npm run deploy-commands . This will first recursively read all the files inside \"src/commandHandler/commands\" and save the to an array. Afterwards a call to the Discord API is made where all the commands are registered with the discord bot token and their command data: ( async () => { try { console . log ( 'Started refreshing application (/) commands.' ); await rest . put ( Routes . applicationGuildCommands ( process . env . CLIENT_ID ! , process . env . GUILD_ID ! ), { body : commands }, ) console . log ( 'Successfully reloaded application (/) commands.' ); } catch ( _error ) { console . error ( _error ); } })(); While registering the commands the bot will start and after it started completely the permissions for all the commands will be set.","title":"Registering Commands"},{"location":"development/commands/#setting-command-permissions","text":"After the bot started all the commands that are registered to it are fetched with const comms = await guild.commands.fetch(); Then the roles Array is read containing all the roles we defined in the permissions.json. This is an example of such a Role: { \"name\" : \"adminRole\" , \"id\" : \"940188878692835368\" , \"type\" : \"ROLE\" , \"permission\" : true } Now we loop through all the commands inside comms and for each one we get the permission array defined here: //___________SlashCommand___________ export const command : SlashCommand = { permissions : [ \"devRole\" ], data : data , execute : execute , }; and search for the name in the roles array. When we found the correct role we map its data to an interface called DeployablePermissionData , which looks like this, and return it: interface DeployablePermissionData { id : string ; type : string ; permission : boolean ; } id is the id of the Role or the User type can either be USER or ROLE permission tue means the role or user can use the command. false means he cant. The whole function looks like this: function mapDeployablePermissions ( permissionsNamesArray : string [], roles : Array < any > ) { const permissionsArray : any = []; let deployablePermissions : DeployablePermissionData [] = []; permissionsNamesArray . forEach ( permission =>{ permissionsArray . push (( roles . find ( role => role . name === permission )) ?? \"\" ) }) deployablePermissions = permissionsArray . map (( role : any ) => { return { id : role.id ?? \"123456789012345678\" , type : role . type ?? \"ROLE\" , permission : role.permission ?? false } } ) return deployablePermissions ; } Now that we have the permission data for every permission of this command we add it and the command id to the fullPermissions Array. After we do this for every remaining we have an Array [ { id : ' 950428001533845659 ' , permissio ns : [ { id : \"123456789012345678\" , t ype : \"ROLE\" , permissio n : true }, { id : \"123456789012345678\" , t ype : \"ROLE\" , permissio n : true } ] } ] In the last step this Array gets passed into the guild.commands.permissions.set(); function where all the permissions are finally set.","title":"Setting Command Permissions"},{"location":"development/commands/#editing-or-deleting-commands","text":"","title":"Editing or Deleting commands"},{"location":"development/commands/#editing-commands","text":"You can edit the content of //_________Command____________ async function execute ( interaction : CommandInteraction ) { // write your command here } but if you update for example the permissions you need to run npm run deploy-commands again.","title":"Editing Commands"},{"location":"development/commands/#deleting-commands","text":"If instead you want to delete a command you only need to delete its file from the \"/commands\" folder and then run npm run deploy-commands .","title":"Deleting Commands"},{"location":"development/development/","text":"Development This is the Development section of the Bot. This section is intended to aid in the maintenance of the bot. Additional Info Some Additional Info that helps in development Accent Color Hex code --- #ED2027 Discord IDs are too big for int and should therefore always used as strings. If sql wont install run npm config set python /path/to/python3 How to create a request server to receive webhooks Setting up your Dev Environment It is strongly recommended to use a Code Editor like VSCode. Prerequisites Nodejs Python A Discord Application from Discord Dev Portal A Discord server you can use your Bot while developing Installation These steps are the same as if you would install the bot on a server. Clone the repo with git clone https://github.com/Frostplexx/DnD_Helper.git . run npm i to install the required packages. If you don't have python 2 install (which you should't) run npm config set python /path/to/python3 otherwise sqlite 3 wont install. go to https://discord.com/developers/applications and create a new Application. Go to the bot tab and create a new bot. Run the bot with npm run start . The bot will generate some files and ask you for some IDs like your bot token or the application id. most of these IDs can be gathered at the discord developer portal. The bot should run now. Developing the Bot You can now freely edit the bot as you please. Its is recommended that you run the bot with the npm run dev command as this allows the bot to automatically restart when you make changes to it. Additionally for debugging purposes in VSCode we include a launch.json in the .VSCode folder, which will allow you to use breakpoints. We also recommend install a linter like eslint, which allows you to write cleaner and more consistent looking code Using Ngrok If you want to test out test the google form, but cant on the production bot it is recommended to use a tunneling service like ngrok. To get started go to https://ngrok.com/download and download and install ngrok for your operating system. Now open a terminal and type ngrok http 3000 this will open a tunnel to http://localhost:3000 . Now a ui will appear which looks similar to this: Copy the URL which forwards to http://localhost:3000 , in this case it is \"http://2f64-2a02-810d-d40-65a0-dde3-275-e5f2-f210.ngrok.io\" and paste it into the POST_URL in the google forms script. It should look something like this: var POST_URL = \"http://2f64-2a02-810d-d40-65a0-dde3-275-e5f2-f210.ngrok.io/form\" ; var TOKEN = \"\" ; function onSubmit ( e ) { var form = FormApp . getActiveForm (); var allResponses = form . getResponses (); var latestResponse = allResponses [ allResponses . length - 1 ]; var response = latestResponse . getItemResponses (); var items = new Map (); for ( var i = 0 ; i < response . length ; i ++ ) { var question = response [ i ]. getItem (). getTitle (). toLowerCase () . replaceAll ( \" \" , \"_\" ) . replaceAll ( \"/\" , \"_\" ) . replaceAll ( \"&\" , \"\" ) . replaceAll ( \"__\" , \"_\" ) . replaceAll ( \"(\" , \"\" ) . replaceAll ( \")\" , \"\" ); var answer = response [ i ]. getResponse (); try { var parts = answer . match ( /[\\s\\S]{1,1024}/g ) || []; } catch ( e ) { var parts = answer ; } for ( var j = 0 ; j < parts . length ; j ++ ) { items . set ( question , parts [ j ] ?? \"\" ) } } var parsed = { \"campaign_name\" : items . get ( \"campaign_name\" ), \"dm_name\" : items . get ( \"dungeon_master_name\" ), \"language\" : items . get ( \"language\" ), \"description\" : items . get ( \"campaign_description\" ), \"difficulty\" : items . get ( \"difficulty\" ), \"players_max\" : items . get ( \"maximum_amount_of_players\" ), \"location\" : items . get ( \"where_online_irl_location\" ), \"time\" : items . get ( \"when_day_s_time\" ), \"notes\" : items . get ( \"additional_notes\" ) ?? \"No Notes\" , \"icon\" : items . get ( \"campaign_icon\" ), \"username\" : items . get ( \"discord-tag\" ) } console . log ( parsed ) var options = { \"method\" : \"post\" , \"headers\" : { 'Authorization' : 'Bearer ' + TOKEN , \"Content-Type\" : \"application/json\" , }, \"payload\" : JSON . stringify ( parsed ) }; UrlFetchApp . fetch ( POST_URL , options ); }; Don't forget to add the \"/form\" at the end of the URL. Now save the script and when you send a new campaign form it should now be received by your development bot. If you are finished with development don't forget to change the url back to the one of your production bot, or better yet have a completely separate form just for development.","title":"Introduction"},{"location":"development/development/#development","text":"This is the Development section of the Bot. This section is intended to aid in the maintenance of the bot.","title":"Development"},{"location":"development/development/#additional-info","text":"Some Additional Info that helps in development Accent Color Hex code --- #ED2027 Discord IDs are too big for int and should therefore always used as strings. If sql wont install run npm config set python /path/to/python3 How to create a request server to receive webhooks","title":"Additional Info"},{"location":"development/development/#setting-up-your-dev-environment","text":"It is strongly recommended to use a Code Editor like VSCode.","title":"Setting up your Dev Environment"},{"location":"development/development/#prerequisites","text":"Nodejs Python A Discord Application from Discord Dev Portal A Discord server you can use your Bot while developing","title":"Prerequisites"},{"location":"development/development/#installation","text":"These steps are the same as if you would install the bot on a server. Clone the repo with git clone https://github.com/Frostplexx/DnD_Helper.git . run npm i to install the required packages. If you don't have python 2 install (which you should't) run npm config set python /path/to/python3 otherwise sqlite 3 wont install. go to https://discord.com/developers/applications and create a new Application. Go to the bot tab and create a new bot. Run the bot with npm run start . The bot will generate some files and ask you for some IDs like your bot token or the application id. most of these IDs can be gathered at the discord developer portal. The bot should run now.","title":"Installation"},{"location":"development/development/#developing-the-bot","text":"You can now freely edit the bot as you please. Its is recommended that you run the bot with the npm run dev command as this allows the bot to automatically restart when you make changes to it. Additionally for debugging purposes in VSCode we include a launch.json in the .VSCode folder, which will allow you to use breakpoints. We also recommend install a linter like eslint, which allows you to write cleaner and more consistent looking code","title":"Developing the Bot"},{"location":"development/development/#using-ngrok","text":"If you want to test out test the google form, but cant on the production bot it is recommended to use a tunneling service like ngrok. To get started go to https://ngrok.com/download and download and install ngrok for your operating system. Now open a terminal and type ngrok http 3000 this will open a tunnel to http://localhost:3000 . Now a ui will appear which looks similar to this: Copy the URL which forwards to http://localhost:3000 , in this case it is \"http://2f64-2a02-810d-d40-65a0-dde3-275-e5f2-f210.ngrok.io\" and paste it into the POST_URL in the google forms script. It should look something like this: var POST_URL = \"http://2f64-2a02-810d-d40-65a0-dde3-275-e5f2-f210.ngrok.io/form\" ; var TOKEN = \"\" ; function onSubmit ( e ) { var form = FormApp . getActiveForm (); var allResponses = form . getResponses (); var latestResponse = allResponses [ allResponses . length - 1 ]; var response = latestResponse . getItemResponses (); var items = new Map (); for ( var i = 0 ; i < response . length ; i ++ ) { var question = response [ i ]. getItem (). getTitle (). toLowerCase () . replaceAll ( \" \" , \"_\" ) . replaceAll ( \"/\" , \"_\" ) . replaceAll ( \"&\" , \"\" ) . replaceAll ( \"__\" , \"_\" ) . replaceAll ( \"(\" , \"\" ) . replaceAll ( \")\" , \"\" ); var answer = response [ i ]. getResponse (); try { var parts = answer . match ( /[\\s\\S]{1,1024}/g ) || []; } catch ( e ) { var parts = answer ; } for ( var j = 0 ; j < parts . length ; j ++ ) { items . set ( question , parts [ j ] ?? \"\" ) } } var parsed = { \"campaign_name\" : items . get ( \"campaign_name\" ), \"dm_name\" : items . get ( \"dungeon_master_name\" ), \"language\" : items . get ( \"language\" ), \"description\" : items . get ( \"campaign_description\" ), \"difficulty\" : items . get ( \"difficulty\" ), \"players_max\" : items . get ( \"maximum_amount_of_players\" ), \"location\" : items . get ( \"where_online_irl_location\" ), \"time\" : items . get ( \"when_day_s_time\" ), \"notes\" : items . get ( \"additional_notes\" ) ?? \"No Notes\" , \"icon\" : items . get ( \"campaign_icon\" ), \"username\" : items . get ( \"discord-tag\" ) } console . log ( parsed ) var options = { \"method\" : \"post\" , \"headers\" : { 'Authorization' : 'Bearer ' + TOKEN , \"Content-Type\" : \"application/json\" , }, \"payload\" : JSON . stringify ( parsed ) }; UrlFetchApp . fetch ( POST_URL , options ); }; Don't forget to add the \"/form\" at the end of the URL. Now save the script and when you send a new campaign form it should now be received by your development bot. If you are finished with development don't forget to change the url back to the one of your production bot, or better yet have a completely separate form just for development.","title":"Using Ngrok"},{"location":"development/events/","text":"","title":"Event Handling"},{"location":"development/music/","text":"Music Player Usage Metis, starting with v1.1, also posesses a music player. But instead of any other discord bot, this music player isn't controlled via commands but using a website, found here . The basic user flow is as follows: The user has to join a voice channel in discord Afterwards he writes /new-session, which will generate a session code for him The user navigates to https://metisbot.xyz/music.html and enters the session code He has now access to the dashbaord where he can: create and manage playlists; play, pause, skip and change the volume. After 24h the session code is invalid We chose to to keep the session code valid for 24h no matter what, because it can be used by other players in the same channel, as this code is not player, but channel specific. Behind the scenes The Music player uses the WebSocket protocoll, which allows communicaiton in both dircetion. Authenticating Firstly the website establishes a http connection with the bot/server over which it asks to switch to the WebSocket protocoll. The server will respond and the connection is established. This first handshake is handled by this piece of code: server . on ( 'upgrade' , ( request : any , socket : any , head : any ) => { wsServer . handleUpgrade ( request , socket , head , ( socket : any ) => { wsServer . emit ( 'connection' , socket , request ); }); }); To keep the connection open, a heartbeat has to be established which happens clientside: function ping () { connection . send ( JSON . stringify ({ \"type\" : \"__ping__\" })); tm = setTimeout ( function () { /// ---connection closed /// console . error ( 'connection closed' ); }, 5000 ); } function pong () { clearTimeout ( tm ); } connection . onopen = function () { setInterval ( ping , 30000 ); } connection . onmessage = function ( evt ) { var msg = evt . data ; if ( msg !== '__pong__' ) { checkresponse ( msg ); resolve ( JSON . parse ( msg )); } else if ( msg == '__pong__' ) { pong (); } } Communication between the client and the server happens with json parsed to a string, because this protocol only allows strings. A websocket message looks like this: { \"type\" : //type of action you want to do \"token\" : //the token of the player \"data\" : //the data you want to send can in some cases be undefined } Where type can be any of the following: \"__pong__\", \"__ping__\", \"playerCreate\", \"playerUpdate\", \"skipPlayer\", \"getPlayerState\", \"authenticate\", and token is always the authentication token that the user generated at the beginning. Data may contain extra information but can also be empty depending on which \"type\" you chose. Playing Music To play music you have to first create the player, which you do like this: { \"type\" : \"playerCreate\" , \"token\" : \"mytoken\" , \"data\" : { \"songs\" : [], \"volume\" : 10 } } \"volume\" can either be a number between 0 and 100 or can be left out completely. In the latter case the volume will default to 100. \"songs\" on the other hand is an array of all the songs you want to put in the queue. A single song object looks like this: { \"song_id\" : \"12321342, \" url \": \" https : //www.youtube.com/watch?v=\", \"start_time\" : \"0\" , } \"song_id\" is a random id which currently goes unused but still has to be passed. Similarly \"start_time\" goes also unused but will in the future be used to control the starting time of the video. \"start_time\" contrary to what the name says will be a percentage value that goes from 0% (start of video) to 100% (end of video). The music player currently only supports youtube videos and therfore will the \"url\" field only be filled with youtube video urls. Support for youtube playlists needs to be implemented client side and is up to the developer. Lastly youtube lifestreams are also unsupported due to the yt-dl-core which doesn't support youtube life stream. Most of the other Music Player function are accesed with the \"playerUpdate\" type: { \"type\" : \"playerUpdate\" , \"token\" : \"mytoken\" , \"data\" : {} } In this case the \"data\" field is also important. In can be filled with these values: { \"state\" : \"volume\" : } \"state\" can be one of the following values: \"paused\", \"playing\", \"stopped\" and volume is a number between 0 and 100. Both of these are optional, so for example if you want to stop the player you dont need to pass the volume. The state \"stopped\" is currently unused. The only separate function is \"skipPlayer\" which as the name suggests skips to the next song and only takes the token (This may be update in the future to be included in \"updatePlayer\"): { \"type\" : \"skipPlayer\" , \"token\" : \"mytoken\" } The last request you can make is \"getPlayerState\" which returns the current state of the player: { \"type\" : \"getPlayerState\" , \"token\" : \"mytoken\" , } This includes if the player is playing or paused, the name of the song that is playing, its url and youtube thumbnail and the current volume. Server responses As indicated in the previous chapter the server also send a response to every request you make. This reponse looks like this: { status : true , message : \"\" , data : {} } \"status\" is true if the request suceeded and false if it failed. \"message\" is a human readable message intenden for the developer e.g. \"Player skipped successfully\". \"data\" similarly to the \"data\" field in our request may include additional information which changes from request to request but most of the time includes the current state of the player or some information about the current song.","title":"Music"},{"location":"development/music/#music-player","text":"","title":"Music Player"},{"location":"development/music/#usage","text":"Metis, starting with v1.1, also posesses a music player. But instead of any other discord bot, this music player isn't controlled via commands but using a website, found here . The basic user flow is as follows: The user has to join a voice channel in discord Afterwards he writes /new-session, which will generate a session code for him The user navigates to https://metisbot.xyz/music.html and enters the session code He has now access to the dashbaord where he can: create and manage playlists; play, pause, skip and change the volume. After 24h the session code is invalid We chose to to keep the session code valid for 24h no matter what, because it can be used by other players in the same channel, as this code is not player, but channel specific.","title":"Usage"},{"location":"development/music/#behind-the-scenes","text":"The Music player uses the WebSocket protocoll, which allows communicaiton in both dircetion.","title":"Behind the scenes"},{"location":"development/music/#authenticating","text":"Firstly the website establishes a http connection with the bot/server over which it asks to switch to the WebSocket protocoll. The server will respond and the connection is established. This first handshake is handled by this piece of code: server . on ( 'upgrade' , ( request : any , socket : any , head : any ) => { wsServer . handleUpgrade ( request , socket , head , ( socket : any ) => { wsServer . emit ( 'connection' , socket , request ); }); }); To keep the connection open, a heartbeat has to be established which happens clientside: function ping () { connection . send ( JSON . stringify ({ \"type\" : \"__ping__\" })); tm = setTimeout ( function () { /// ---connection closed /// console . error ( 'connection closed' ); }, 5000 ); } function pong () { clearTimeout ( tm ); } connection . onopen = function () { setInterval ( ping , 30000 ); } connection . onmessage = function ( evt ) { var msg = evt . data ; if ( msg !== '__pong__' ) { checkresponse ( msg ); resolve ( JSON . parse ( msg )); } else if ( msg == '__pong__' ) { pong (); } } Communication between the client and the server happens with json parsed to a string, because this protocol only allows strings. A websocket message looks like this: { \"type\" : //type of action you want to do \"token\" : //the token of the player \"data\" : //the data you want to send can in some cases be undefined } Where type can be any of the following: \"__pong__\", \"__ping__\", \"playerCreate\", \"playerUpdate\", \"skipPlayer\", \"getPlayerState\", \"authenticate\", and token is always the authentication token that the user generated at the beginning. Data may contain extra information but can also be empty depending on which \"type\" you chose.","title":"Authenticating"},{"location":"development/music/#playing-music","text":"To play music you have to first create the player, which you do like this: { \"type\" : \"playerCreate\" , \"token\" : \"mytoken\" , \"data\" : { \"songs\" : [], \"volume\" : 10 } } \"volume\" can either be a number between 0 and 100 or can be left out completely. In the latter case the volume will default to 100. \"songs\" on the other hand is an array of all the songs you want to put in the queue. A single song object looks like this: { \"song_id\" : \"12321342, \" url \": \" https : //www.youtube.com/watch?v=\", \"start_time\" : \"0\" , } \"song_id\" is a random id which currently goes unused but still has to be passed. Similarly \"start_time\" goes also unused but will in the future be used to control the starting time of the video. \"start_time\" contrary to what the name says will be a percentage value that goes from 0% (start of video) to 100% (end of video). The music player currently only supports youtube videos and therfore will the \"url\" field only be filled with youtube video urls. Support for youtube playlists needs to be implemented client side and is up to the developer. Lastly youtube lifestreams are also unsupported due to the yt-dl-core which doesn't support youtube life stream. Most of the other Music Player function are accesed with the \"playerUpdate\" type: { \"type\" : \"playerUpdate\" , \"token\" : \"mytoken\" , \"data\" : {} } In this case the \"data\" field is also important. In can be filled with these values: { \"state\" : \"volume\" : } \"state\" can be one of the following values: \"paused\", \"playing\", \"stopped\" and volume is a number between 0 and 100. Both of these are optional, so for example if you want to stop the player you dont need to pass the volume. The state \"stopped\" is currently unused. The only separate function is \"skipPlayer\" which as the name suggests skips to the next song and only takes the token (This may be update in the future to be included in \"updatePlayer\"): { \"type\" : \"skipPlayer\" , \"token\" : \"mytoken\" } The last request you can make is \"getPlayerState\" which returns the current state of the player: { \"type\" : \"getPlayerState\" , \"token\" : \"mytoken\" , } This includes if the player is playing or paused, the name of the song that is playing, its url and youtube thumbnail and the current volume.","title":"Playing Music"},{"location":"development/music/#server-responses","text":"As indicated in the previous chapter the server also send a response to every request you make. This reponse looks like this: { status : true , message : \"\" , data : {} } \"status\" is true if the request suceeded and false if it failed. \"message\" is a human readable message intenden for the developer e.g. \"Player skipped successfully\". \"data\" similarly to the \"data\" field in our request may include additional information which changes from request to request but most of the time includes the current state of the player or some information about the current song.","title":"Server responses"},{"location":"development/playersingup/","text":"Player Flow After we have seen how a campaign is generated we will explore the flow a player goes through if he wants to enter a campaign. Applying for a Campaign","title":"Player Flow"},{"location":"development/playersingup/#player-flow","text":"After we have seen how a campaign is generated we will explore the flow a player goes through if he wants to enter a campaign.","title":"Player Flow"},{"location":"development/playersingup/#applying-for-a-campaign","text":"","title":"Applying for a Campaign"},{"location":"development/userInteractions/","text":"Simple Buttons Modals Select Menus","title":"User Interactions"},{"location":"development/userInteractions/#simple-buttons","text":"","title":"Simple Buttons"},{"location":"development/userInteractions/#modals","text":"","title":"Modals"},{"location":"development/userInteractions/#select-menus","text":"","title":"Select Menus"},{"location":"development/vps/","text":"VPS Settings The Bot is hosted on a free instance of Oracle Cloud running Ubuntu 20.04.4 LTS so a bit of linux knowledge is required. All Ports on the server are closed except 22 for ssh traffic and 443 for https. The server also has an elastic ip so it is always reachable. Nginx Config On the server runs nginx configured as a reverse proxy, which lets us establish an https connection, so that the traffic is always encrypted. The configuration file can be found in \"/etc/nginx/sites-enabled/default\" and looks like this: ## # You should look at the following URL's in order to grasp a solid understanding # of Nginx configuration files in order to fully unleash the power of Nginx. # https://www.nginx.com/resources/wiki/start/ # https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/ # https://wiki.debian.org/Nginx/DirectoryStructure # # In most cases, administrators will remove this file from sites-enabled/ and # leave it as reference inside of sites-available where it will continue to be # updated by the nginx packaging team. # # This file will automatically load configuration files provided by other # applications, such as Drupal or Wordpress. These applications will be made # available underneath a path with that package name, such as /drupal8. # # Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples. ## # server { listen 443 ssl; server_name preview.webhook.metisbot.xyz; ssl_certificate /etc/letsencrypt/live/preview.webhook.metisbot.xyz/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/preview.webhook.metisbot.xyz/privkey.pem; ssl_prefer_server_ciphers on; location /form { proxy_pass http://localhost:3000/form; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } location /git { proxy_pass http://localhost:3000/git; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } location /ws { proxy_pass http://localhost:3000/; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"Upgrade\"; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } } For more help please consult this great Guide by Microsoft SSL Certificate We used Certbot to create the ssl certificate. To create the certificate please follow the instructions on here . In short: install cerbot with snap make sure port 80 is open run cerbot certonly --nginx This will create two certificates. Afterwards tell nginx in its config where it can find the certificates: ssl_certificate /etc/letsencrypt/live/webhook.metisbot.xyz/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/webhook.metisbot.xyz/privkey.pem ; Important! Don't forget to open port 443 in your instance settings, otherwise your server won't be reachable FAQ: Q: Server is unreachable even if I configured all the ports correctly A: See https://stackoverflow.com/a/54810101 Custom Domain Because we are using a custom domain we created an A record that points webhook.metis.xyz to our server IP. Custom domains can be bought cheaply on sites like namecheap or godaddy","title":"VPS Settings"},{"location":"development/vps/#vps-settings","text":"The Bot is hosted on a free instance of Oracle Cloud running Ubuntu 20.04.4 LTS so a bit of linux knowledge is required. All Ports on the server are closed except 22 for ssh traffic and 443 for https. The server also has an elastic ip so it is always reachable.","title":"VPS Settings"},{"location":"development/vps/#nginx-config","text":"On the server runs nginx configured as a reverse proxy, which lets us establish an https connection, so that the traffic is always encrypted. The configuration file can be found in \"/etc/nginx/sites-enabled/default\" and looks like this: ## # You should look at the following URL's in order to grasp a solid understanding # of Nginx configuration files in order to fully unleash the power of Nginx. # https://www.nginx.com/resources/wiki/start/ # https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/ # https://wiki.debian.org/Nginx/DirectoryStructure # # In most cases, administrators will remove this file from sites-enabled/ and # leave it as reference inside of sites-available where it will continue to be # updated by the nginx packaging team. # # This file will automatically load configuration files provided by other # applications, such as Drupal or Wordpress. These applications will be made # available underneath a path with that package name, such as /drupal8. # # Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples. ## # server { listen 443 ssl; server_name preview.webhook.metisbot.xyz; ssl_certificate /etc/letsencrypt/live/preview.webhook.metisbot.xyz/fullchain.pem; ssl_certificate_key /etc/letsencrypt/live/preview.webhook.metisbot.xyz/privkey.pem; ssl_prefer_server_ciphers on; location /form { proxy_pass http://localhost:3000/form; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } location /git { proxy_pass http://localhost:3000/git; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } location /ws { proxy_pass http://localhost:3000/; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection \"Upgrade\"; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; } } For more help please consult this great Guide by Microsoft","title":"Nginx Config"},{"location":"development/vps/#ssl-certificate","text":"We used Certbot to create the ssl certificate. To create the certificate please follow the instructions on here . In short: install cerbot with snap make sure port 80 is open run cerbot certonly --nginx This will create two certificates. Afterwards tell nginx in its config where it can find the certificates: ssl_certificate /etc/letsencrypt/live/webhook.metisbot.xyz/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/webhook.metisbot.xyz/privkey.pem ; Important! Don't forget to open port 443 in your instance settings, otherwise your server won't be reachable FAQ: Q: Server is unreachable even if I configured all the ports correctly A: See https://stackoverflow.com/a/54810101","title":"SSL Certificate"},{"location":"development/vps/#custom-domain","text":"Because we are using a custom domain we created an A record that points webhook.metis.xyz to our server IP. Custom domains can be bought cheaply on sites like namecheap or godaddy","title":"Custom Domain"},{"location":"installation/customization/","text":"Customisation Permissions You can add permissions in the permissions.json file under src/data/permissions.json. There are already 3 Roles preconfigured, but you can always add more. Other than Roles you can also add Users to this file. Every permission has this template: { \"name\": \"exampleName\", \"id\": \"123456789012345678\", \"type\": \"ROLE\", \"permission\": true } name can be whatever you want and is only used inside the code.\\ id is the ID of the Role or the User. You can get it by right clicking the item inside discord and copying the id (with developer mode enabled)\\ type can either be USER or ROLE, depending on if you want to add a user or a role\\ permission dictates if this user or this role can user the command or cant. The second part of adding a permission is it also inside the code. For this open the command file you want inside src/commandHandler/commands. Scroll to the bottom of the command until you see //_____SlashCommand (do not change)_______ export const command: SlashCommand = { permissions: [\"modRole\", \"devRole\", \"adminRole\"], data: data, execute: execute, }; Add the name you have just given your new permission to the permissions Array like this: //_____SlashCommand (do not change)_______ export const command: SlashCommand = { permissions: [\"modRole\", \"devRole\", \"adminRole\",\"exampleName\"], data: data, execute: execute, }; Lastly run npm run deploy-commands to update the commands. If you now restart your bot the permissions should be updated. Messages Most messages can be found in src/data/messages.json where you can freely edit them to your hearts content.","title":"Customization"},{"location":"installation/customization/#customisation","text":"","title":"Customisation"},{"location":"installation/customization/#permissions","text":"You can add permissions in the permissions.json file under src/data/permissions.json. There are already 3 Roles preconfigured, but you can always add more. Other than Roles you can also add Users to this file. Every permission has this template: { \"name\": \"exampleName\", \"id\": \"123456789012345678\", \"type\": \"ROLE\", \"permission\": true } name can be whatever you want and is only used inside the code.\\ id is the ID of the Role or the User. You can get it by right clicking the item inside discord and copying the id (with developer mode enabled)\\ type can either be USER or ROLE, depending on if you want to add a user or a role\\ permission dictates if this user or this role can user the command or cant. The second part of adding a permission is it also inside the code. For this open the command file you want inside src/commandHandler/commands. Scroll to the bottom of the command until you see //_____SlashCommand (do not change)_______ export const command: SlashCommand = { permissions: [\"modRole\", \"devRole\", \"adminRole\"], data: data, execute: execute, }; Add the name you have just given your new permission to the permissions Array like this: //_____SlashCommand (do not change)_______ export const command: SlashCommand = { permissions: [\"modRole\", \"devRole\", \"adminRole\",\"exampleName\"], data: data, execute: execute, }; Lastly run npm run deploy-commands to update the commands. If you now restart your bot the permissions should be updated.","title":"Permissions"},{"location":"installation/customization/#messages","text":"Most messages can be found in src/data/messages.json where you can freely edit them to your hearts content.","title":"Messages"},{"location":"installation/deployment/","text":"Deployment Installation To setup pm2 please follow the guide on the DiscordJS Docs . Running the process For deployment we use pm2. Install it on your server and optionally configure the web dashboard. With npm run prod you can start Metis with pm2. Now you can open pm2.io in a browser and monitor the bot! It even has custom metrics.","title":"Deploying"},{"location":"installation/deployment/#deployment","text":"","title":"Deployment"},{"location":"installation/deployment/#installation","text":"To setup pm2 please follow the guide on the DiscordJS Docs .","title":"Installation"},{"location":"installation/deployment/#running-the-process","text":"For deployment we use pm2. Install it on your server and optionally configure the web dashboard. With npm run prod you can start Metis with pm2. Now you can open pm2.io in a browser and monitor the bot! It even has custom metrics.","title":"Running the process"},{"location":"installation/googleform/","text":"Creating the Google From To create a campaign we use Google Forms, because it is the easiest way without hosting an additional website. Creating the google Form First we need to create the google form. Our current form looks like this: Go to forms.google.com and create a new form. The only thing that you have to keep in mind is, that you'll have to change some settings in the next section if your decide to add or remove sections or if you change the titles. Google Forms Script The second part of creating the Google Form is programming the part that send the the forms data to our bot. For this click the 3 dots in the top right corner of the google forms editing page and fill in the following script: var POST_URL = \"\" ; var TOKEN = \"\" ; function onSubmit ( e ) { var form = FormApp . getActiveForm (); var allResponses = form . getResponses (); var latestResponse = allResponses [ allResponses . length - 1 ]; var response = latestResponse . getItemResponses (); var items = new Map (); for ( var i = 0 ; i < response . length ; i ++ ) { var question = response [ i ]. getItem (). getTitle (). toLowerCase () . replaceAll ( \" \" , \"_\" ) . replaceAll ( \"/\" , \"_\" ) . replaceAll ( \"&\" , \"\" ) . replaceAll ( \"__\" , \"_\" ) . replaceAll ( \"(\" , \"\" ) . replaceAll ( \")\" , \"\" ); var answer = response [ i ]. getResponse (); try { var parts = answer . match ( /[\\s\\S]{1,1024}/g ) || []; } catch ( e ) { var parts = answer ; } for ( var j = 0 ; j < parts . length ; j ++ ) { items . set ( question , parts [ j ] ?? \"\" ) } } var parsed = { \"campaign_name\" : items . get ( \"campaign_name\" ), \"dm_name\" : items . get ( \"dungeon_master_name\" ), \"language\" : items . get ( \"language\" ), \"description\" : items . get ( \"campaign_description\" ), \"difficulty\" : items . get ( \"difficulty\" ), \"players_max\" : items . get ( \"maximum_amount_of_players\" ), \"location\" : items . get ( \"where_online_irl_location\" ), \"time\" : items . get ( \"when_day_s_time\" ), \"notes\" : items . get ( \"additional_notes\" ) ?? \"No Notes\" , \"icon\" : items . get ( \"campaign_icon\" ), \"username\" : items . get ( \"discord-tag\" ) } console . log ( parsed ) var options = { \"method\" : \"post\" , \"headers\" : { 'Authorization' : 'Bearer ' + TOKEN , \"Content-Type\" : \"application/json\" , }, \"payload\" : JSON . stringify ( parsed ) }; UrlFetchApp . fetch ( POST_URL , options ); }; For POST_URL you need to fill in the URL your bot is listening to, followed by \"/form\" (e.g. https://example.com/form ). TOKEN on the other hand contains the bearer token with which the bot checks if its really coming from your google form. This should be a strong password and it hast to be the same as the SECRET_KEY variable that you set for your bot. If you changed any of the section while creating the google form, you'll need to change the names of the keys in the \"parsed\" variable. As you can see the keys are the Titles of the questions but in a more machine readable form. They follow this notation: Spaces get turned into \"_\" / & and () are removed if double empty spaces should happen they get reduced to \"_\" everything is lowercase Here are some examples how the titles will look: Campaign Name >> campaign_name Dungeon Master Name >> dungeon_master_name Where (online/irl & location) >> where_online_irl_location When (day/s & time) >> when_day_s_time Because some of these names are hard to work with, everything gets parsed into the parsed variable, which is then sent in the body of the web request to our bot.","title":"Google Form"},{"location":"installation/googleform/#creating-the-google-from","text":"To create a campaign we use Google Forms, because it is the easiest way without hosting an additional website.","title":"Creating the Google From"},{"location":"installation/googleform/#creating-the-google-form","text":"First we need to create the google form. Our current form looks like this: Go to forms.google.com and create a new form. The only thing that you have to keep in mind is, that you'll have to change some settings in the next section if your decide to add or remove sections or if you change the titles.","title":"Creating the google Form"},{"location":"installation/googleform/#google-forms-script","text":"The second part of creating the Google Form is programming the part that send the the forms data to our bot. For this click the 3 dots in the top right corner of the google forms editing page and fill in the following script: var POST_URL = \"\" ; var TOKEN = \"\" ; function onSubmit ( e ) { var form = FormApp . getActiveForm (); var allResponses = form . getResponses (); var latestResponse = allResponses [ allResponses . length - 1 ]; var response = latestResponse . getItemResponses (); var items = new Map (); for ( var i = 0 ; i < response . length ; i ++ ) { var question = response [ i ]. getItem (). getTitle (). toLowerCase () . replaceAll ( \" \" , \"_\" ) . replaceAll ( \"/\" , \"_\" ) . replaceAll ( \"&\" , \"\" ) . replaceAll ( \"__\" , \"_\" ) . replaceAll ( \"(\" , \"\" ) . replaceAll ( \")\" , \"\" ); var answer = response [ i ]. getResponse (); try { var parts = answer . match ( /[\\s\\S]{1,1024}/g ) || []; } catch ( e ) { var parts = answer ; } for ( var j = 0 ; j < parts . length ; j ++ ) { items . set ( question , parts [ j ] ?? \"\" ) } } var parsed = { \"campaign_name\" : items . get ( \"campaign_name\" ), \"dm_name\" : items . get ( \"dungeon_master_name\" ), \"language\" : items . get ( \"language\" ), \"description\" : items . get ( \"campaign_description\" ), \"difficulty\" : items . get ( \"difficulty\" ), \"players_max\" : items . get ( \"maximum_amount_of_players\" ), \"location\" : items . get ( \"where_online_irl_location\" ), \"time\" : items . get ( \"when_day_s_time\" ), \"notes\" : items . get ( \"additional_notes\" ) ?? \"No Notes\" , \"icon\" : items . get ( \"campaign_icon\" ), \"username\" : items . get ( \"discord-tag\" ) } console . log ( parsed ) var options = { \"method\" : \"post\" , \"headers\" : { 'Authorization' : 'Bearer ' + TOKEN , \"Content-Type\" : \"application/json\" , }, \"payload\" : JSON . stringify ( parsed ) }; UrlFetchApp . fetch ( POST_URL , options ); }; For POST_URL you need to fill in the URL your bot is listening to, followed by \"/form\" (e.g. https://example.com/form ). TOKEN on the other hand contains the bearer token with which the bot checks if its really coming from your google form. This should be a strong password and it hast to be the same as the SECRET_KEY variable that you set for your bot. If you changed any of the section while creating the google form, you'll need to change the names of the keys in the \"parsed\" variable. As you can see the keys are the Titles of the questions but in a more machine readable form. They follow this notation: Spaces get turned into \"_\" / & and () are removed if double empty spaces should happen they get reduced to \"_\" everything is lowercase Here are some examples how the titles will look: Campaign Name >> campaign_name Dungeon Master Name >> dungeon_master_name Where (online/irl & location) >> where_online_irl_location When (day/s & time) >> when_day_s_time Because some of these names are hard to work with, everything gets parsed into the parsed variable, which is then sent in the body of the web request to our bot.","title":"Google Forms Script"},{"location":"installation/installation/","text":"Setup Prerequisits Nodejs npm A server or something where you can run the bot on. Python gcc or cmake (C/C++ compiler) patience ffmpeg Initial Setup Clone the repo with git clone https://github.com/Frostplexx/DnD_Helper.git . run npm i to install the required packages. If you don't have python 2 install (which you should't) run npm config set python /path/to/python3 otherwise sqlite 3 wont install. go to https://discord.com/developers/applications and create a new Application. Go to the bot tab and create a new bot. Run the bot with npm run start . The bot will generate some files and ask you for some IDs like your bot token or the application id. Most of these IDs can be gathered at the discord developer portal. The bot should run now.","title":"Setup"},{"location":"installation/installation/#setup","text":"","title":"Setup"},{"location":"installation/installation/#prerequisits","text":"Nodejs npm A server or something where you can run the bot on. Python gcc or cmake (C/C++ compiler) patience ffmpeg","title":"Prerequisits"},{"location":"installation/installation/#initial-setup","text":"Clone the repo with git clone https://github.com/Frostplexx/DnD_Helper.git . run npm i to install the required packages. If you don't have python 2 install (which you should't) run npm config set python /path/to/python3 otherwise sqlite 3 wont install. go to https://discord.com/developers/applications and create a new Application. Go to the bot tab and create a new bot. Run the bot with npm run start . The bot will generate some files and ask you for some IDs like your bot token or the application id. Most of these IDs can be gathered at the discord developer portal. The bot should run now.","title":"Initial Setup"}]}